#–¢—Ä–µ–±—É–µ—Ç java
import spacy
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from textstat import textstat
import logging
import re
from spellchecker import SpellChecker
import language_tool_python
from collections import defaultdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = '7935445281:AAFNhbIuOtDGhqZJlitA4T_sU5Ytx0tIIog'
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
try:
    nlp = spacy.load("en_core_web_sm")
    spell = SpellChecker()
    tool = language_tool_python.LanguageTool('en-US')
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    raise

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
user_messages = {}

# –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ CEFR
CEFR_LEVELS = {
    "A1": {
        "name": "–ù–∞—á–∞–ª—å–Ω—ã–π",
        "errors": "–û—á–µ–Ω—å —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤",
        "grammar": "–¢–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç–µ–π—à–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
    },
    "A2": {
        "name": "–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π",
        "errors": "–ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, –Ω–æ –æ—Å–Ω–æ–≤–Ω–∞—è –º—ã—Å–ª—å –ø–æ–Ω—è—Ç–Ω–∞",
        "grammar": "–ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –±–∞–∑–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–∞"
    },
    "B1": {
        "name": "–°—Ä–µ–¥–Ω–∏–π",
        "errors": "–û—à–∏–±–∫–∏ –≤ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö",
        "grammar": "–û—Å–Ω–æ–≤–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
    },
    "B2": {
        "name": "–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ",
        "errors": "–†–µ–¥–∫–∏–µ –æ—à–∏–±–∫–∏, –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö",
        "grammar": "–°–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, —É—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
    },
    "C1": {
        "name": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
        "errors": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏, –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ",
        "grammar": "–í—Å–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —É–≤–µ—Ä–µ–Ω–Ω–æ"
    }
}


def analyze_errors(text):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å–ª–æ–≤"""
    # –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    words = re.findall(r'\b[a-zA-Z]+\b', text.lower())
    misspelled = list(spell.unknown(words))
    spelling_errors = {word: spell.correction(word) for word in misspelled}

    # –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    grammar_matches = tool.check(text)
    grammar_errors = [{
        'error': match.context,
        'message': match.message,
        'replacements': match.replacements[:3] if match.replacements else []
    } for match in grammar_matches]

    # –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (spaCy)
    doc = nlp(text)
    syntax_errors = []
    for sent in doc.sents:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—è–¥–∫–∞ —Å–ª–æ–≤
        has_subject = any(tok.dep_ in ("nsubj", "nsubjpass") for tok in sent)
        has_verb = any(tok.pos_ == "VERB" for tok in sent)

        if not has_subject:
            syntax_errors.append("–ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ–¥–ª–µ–∂–∞—â–µ–µ")
        if not has_verb:
            syntax_errors.append("–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–∫–∞–∑—É–µ–º–æ–µ")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–ª–æ–≥–æ–≤
        for tok in sent:
            if tok.dep_ in ("prep", "agent") and not any(t.head == tok for t in sent):
                syntax_errors.append(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–µ–¥–ª–æ–≥–æ–º: '{tok.text}'")

    return {
        "spelling_errors": spelling_errors,
        "grammar_errors": grammar_errors,
        "syntax_errors": syntax_errors,
        "total_errors": len(spelling_errors) + len(grammar_errors) + len(syntax_errors)
    }


def determine_level(error_analysis, text):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫"""
    doc = nlp(text)
    sentences = list(doc.sents)
    words = [token.text for token in doc if token.is_alpha]

    # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    avg_sent_len = sum(len(sent) for sent in sentences) / len(sentences) if sentences else 0
    unique_words = len(set(words)) / len(words) if words else 0

    # –û—Ü–µ–Ω–∫–∞ –æ—à–∏–±–æ–∫
    total_errors = error_analysis["total_errors"]
    error_rate = total_errors / len(words) if words else 0

    if error_rate > 0.3:
        return "A1"
    elif error_rate > 0.2:
        return "A2"
    elif error_rate > 0.1:
        return "B1"
    elif error_rate > 0.05:
        return "B2"
    else:
        return "C1"


@dp.message_handler(lambda message: message.text == "–û—Ü–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å")
async def evaluate_level(message: types.Message):
    user_id = message.from_user.id
    if not (messages := user_messages.get(user_id, [])):
        await message.reply("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return

    full_text = " ".join(messages)
    if not re.search(r'[a-zA-Z]', full_text):
        await message.reply("üî† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.")
        return

    # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
    error_analysis = analyze_errors(full_text)
    level = determine_level(error_analysis, full_text)
    level_info = CEFR_LEVELS.get(level, {})

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report_parts = []

    # 1. –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    if error_analysis["spelling_errors"]:
        spelling_report = ["\n‚úèÔ∏è –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:"]
        for wrong, correct in error_analysis["spelling_errors"].items():
            spelling_report.append(f"{wrong} ‚Üí {correct}")
        report_parts.append("\n".join(spelling_report))

    # 2. –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    if error_analysis["grammar_errors"]:
        grammar_report = ["\nüî† –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:"]
        for error in error_analysis["grammar_errors"][:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤
            grammar_report.append(f"{error['error']} ‚Üí {', '.join(error['replacements'][:3]) or '–Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π'}")
        report_parts.append("\n".join(grammar_report))

    # 3. –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    if error_analysis["syntax_errors"]:
        syntax_report = ["\nüìù –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:"] + error_analysis["syntax_errors"][:5]
        report_parts.append("\n".join(syntax_report))

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    response = (
            f"üìä –£—Ä–æ–≤–µ–Ω—å: {level} - {level_info.get('name', '')}\n"
            f"üìå –¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏: {level_info.get('errors', '')}\n"
            f"üîç –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {error_analysis['total_errors']}\n\n"
            + "\n\n".join(report_parts) +
            "\n\nüí° –°–æ–≤–µ—Ç: " + get_advice(level) +
            "\n\n–°–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑."
    )

    user_messages.pop(user_id, None)
    await message.reply(response)


def get_advice(level):
    advice = {
        "A1": "–£—á–∏—Ç–µ –±–∞–∑–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Å–ª–æ–≤.",
        "A2": "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ Present/Past Simple. –°–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –±–æ–ª—å—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –±–∞–∑–æ–≤–æ–π –≥—Ä–∞–º–º–∞—Ç–∏–∫–æ–π.",
        "B1": "–ò–∑—É—á–∞–π—Ç–µ Present Perfect –∏ —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ß–∏—Ç–∞–π—Ç–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É.",
        "B2": "–†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ —Å–ª–æ–∂–Ω—ã–º–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏. –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –ø–∏—Å—å–º–µ–Ω–Ω—É—é —Ä–µ—á—å —Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏.",
        "C1": "–°–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É–π—Ç–µ –Ω—é–∞–Ω—Å—ã —è–∑—ã–∫–∞. –û–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç–∏–ª–∏—Å—Ç–∏–∫—É –∏ –∏–¥–∏–æ–º—ã."
    }
    return advice.get(level, "–†–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ - –∑–∞–ª–æ–≥ —É—Å–ø–µ—Ö–∞!")


if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    executor.start_polling(dp, skip_updates=True)